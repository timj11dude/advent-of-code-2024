package day08

import utils.*

object solution {
    private val example1 = """
        ............
        ........0...
        .....0......
        .......0....
        ....0.......
        ......A.....
        ............
        ............
        ........A...
        .........A..
        ............
        ............
    """.trimIndent()
    private val example2 = """
        T....#....
        ...T......
        .T....#...
        .........#
        ..#.......
        ..........
        ...#......
        ..........
        ....#.....
        ..........
    """.trimIndent()

    private fun <T> List<Matrix<T>.LocalCoordinates>.locateAnteNodes(): List<Matrix<T>.LocalCoordinates> = flatMap { primary ->
        minus(primary).flatMap { secondary ->
            (secondary.minus(primary)).let { delta ->
                generateSequence { delta }
                    .runningFold<Vector2D, Matrix<T>.LocalCoordinates?>(primary) { acc, d -> acc?.plus(d) }
                    .takeWhile { it != null }
                    .filterNotNull()
            }
        }
    }

    /**
     * Given a list of coords, return a count of distinct coords.
     */
    private fun <T> List<Matrix<T>.LocalCoordinates>.distinctLocationsCount(): Int = distinct().count()

    private fun solve(input: List<String>): Int {
        val inputList = input.map(String::toList)
        val grid = Matrix(inputList)
        val types = inputList.flatten().distinct().filter { it.isLetterOrDigit() }
        return types.flatMap { type ->
            grid.indices.filter { coords -> grid[coords] == type }.locateAnteNodes()
        }.distinctLocationsCount()
    }

    @JvmStatic
    fun main(args: Array<String>) {
        println(solve(example1.lines()))
        println(solve(this.getPuzzleInput()))
    }
}